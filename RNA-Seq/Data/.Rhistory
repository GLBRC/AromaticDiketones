colnames(t2) <- c("Time", "value")
colnames(t3) <- c("Time", "value")
colnames(t4) <- c("Time", "value")
colnames(t5) <- c("Time", "value")
colnames(t6) <- c("Time", "value")
long_hplc <- rbind(t1, t2, t3, t4, t5, t6)
head(t3)
head(t4)
head(t5)
head(t6)
t6 <- hplc[localMaxima(hplc$T6), c(1,7)]
t6 <- t6[localMaxima(t6[,2]),]
colnames(t6) <- c("Time", "value")
long_hplc <- rbind(t1, t2, t3, t4, t5, t6)
head(long_hplc)
t1$group <- "Day0"
t2$group <- "Day1"
t3$group <- "Day2"
t4$group <- "Day3"
t5$group <- "Day4"
t6$group <- "Day5"
colnames(t1) <- c("Time", "value", "group")
colnames(t2) <- c("Time", "value", "group")
colnames(t3) <- c("Time", "value", "group")
colnames(t4) <- c("Time", "value", "group")
colnames(t5) <- c("Time", "value", "group")
colnames(t6) <- c("Time", "value", "group")
long_hplc <- rbind(t1, t2, t3, t4, t5, t6)
head(long_hplc)
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.3)
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.3) + scale_x_continuous(breaks = 5)
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.3) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.1))
str(long_hplc)
as.numeric(long_hplc$Time)
as.numeric(as.character(long_hplc$Time))
long_hplc$Time <- as.numeric(as.character(long_hplc$Time))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.3) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.1))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.3) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5))
library(cowplot)
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.3) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.3) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + scale_y_log10()
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.3) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.3) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw()
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.3) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + scale_fill_brewer(palette = "Paired")
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.5) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + scale_fill_brewer(palette = "Paired")
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.1) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + scale_fill_brewer(palette = "Paired")
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.2) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + scale_fill_brewer(palette = "Paired")
long_hplc <- rbind(t2, t3, t4, t5)
long_hplc$Time <- as.numeric(as.character(long_hplc$Time))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.2) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + scale_fill_brewer(palette = "Paired")
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.2
)
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.2) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw()
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw()
long_hplc <- rbind(t2, t3, t4)
long_hplc$Time <- as.numeric(as.character(long_hplc$Time))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw()
long_hplc <- rbind(t2, t3)
long_hplc$Time <- as.numeric(as.character(long_hplc$Time))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw()
long_hplc <- rbind(t4)
long_hplc$Time <- as.numeric(as.character(long_hplc$Time))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw()
long_hplc <- rbind(t1)
long_hplc$Time <- as.numeric(as.character(long_hplc$Time))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw()
long_hplc <- rbind(t2)
long_hplc$Time <- as.numeric(as.character(long_hplc$Time))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw()
long_hplc <- rbind(t3)
long_hplc$Time <- as.numeric(as.character(long_hplc$Time))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw()
long_hplc <- rbind(t4)
long_hplc$Time <- as.numeric(as.character(long_hplc$Time))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw()
long_hplc <- rbind(t1, t2, t3, t4, t5, t6)
long_hplc$Time <- as.numeric(as.character(long_hplc$Time))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group, group = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + facet_grid()
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + facet_grid(rows = long_hplc$group)
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + facet_grid(rows = vars(long_hplc$group))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + scale_log_y()+ facet_grid(rows = vars(long_hplc$group))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + scale_y_log10()+ facet_grid(rows = vars(long_hplc$group))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + scale_y_continous(ymax = 1000000)+ facet_grid(rows = vars(long_hplc$group))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + scale_y_continuous(ymax = 1000000)+ facet_grid(rows = vars(long_hplc$group))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + scale_y_continuous(max = 1000000)+ facet_grid(rows = vars(long_hplc$group))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + scale_y_continuous(limits = c(0,1000000)) + facet_grid(rows = vars(long_hplc$group))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + scale_y_continuous(limits = c(0,250000)) + facet_grid(rows = vars(long_hplc$group))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + scale_y_continuous(limits = c(0,300000)) + facet_grid(rows = vars(long_hplc$group))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + facet_grid(rows = vars(long_hplc$group))
long_hplc$value[which(long_hplc$value > 500000)] <- 500000
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + facet_grid(rows = vars(long_hplc$group))
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = seq(min(long_hplc$Time), max(long_hplc$Time), 0.5)) + theme_bw() + facet_grid(rows = vars(long_hplc$group)) + labs(x = "Time [min]", y = "Intensity [counts]")
ggplot(data = long_hplc, aes(x = Time, ymax = value, fill = group)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = round(seq(min(long_hplc$Time), max(long_hplc$Time), 0.5), 1)) + theme_bw() + facet_grid(rows = vars(long_hplc$group)) + labs(x = "Time [min]", y = "Intensity [counts]")
ggplot(data = long_hplc, aes(x = Time, ymax = value)) + geom_ribbon(ymin = 0, alpha = 0.4) + scale_x_continuous(breaks = round(seq(min(long_hplc$Time), max(long_hplc$Time), 0.5), 1)) + theme_bw() + facet_grid(rows = vars(long_hplc$group)) + labs(x = "Time [min]", y = "Intensity [counts]")
ggplot(data = long_hplc, aes(x = Time, ymax = value)) + geom_ribbon(ymin = 0, fill = "dodgerblue") + scale_x_continuous(breaks = round(seq(min(long_hplc$Time), max(long_hplc$Time), 0.5), 1)) + theme_bw() + facet_grid(rows = vars(long_hplc$group)) + labs(x = "Time [min]", y = "Intensity [counts]")
ggplot(data = long_hplc, aes(x = Time, ymax = value)) + geom_ribbon(ymin = 0, fill = "slateblue") + scale_x_continuous(breaks = round(seq(min(long_hplc$Time), max(long_hplc$Time), 0.5), 1)) + theme_bw() + facet_grid(rows = vars(long_hplc$group)) + labs(x = "Time [min]", y = "Intensity [counts]")
ggplot(data = long_hplc, aes(x = Time, ymax = value)) + geom_ribbon(ymin = 0, fill = "greyblue") + scale_x_continuous(breaks = round(seq(min(long_hplc$Time), max(long_hplc$Time), 0.5), 1)) + theme_bw() + facet_grid(rows = vars(long_hplc$group)) + labs(x = "Time [min]", y = "Intensity [counts]")
ggplot(data = long_hplc, aes(x = Time, ymax = value)) + geom_ribbon(ymin = 0, fill = "paleturquoise4") + scale_x_continuous(breaks = round(seq(min(long_hplc$Time), max(long_hplc$Time), 0.5), 1)) + theme_bw() + facet_grid(rows = vars(long_hplc$group)) + labs(x = "Time [min]", y = "Intensity [counts]")
ggplot(data = long_hplc, aes(x = Time, ymax = value)) + geom_ribbon(ymin = 0, fill = "paleturquoise2") + scale_x_continuous(breaks = round(seq(min(long_hplc$Time), max(long_hplc$Time), 0.5), 1)) + theme_bw() + facet_grid(rows = vars(long_hplc$group)) + labs(x = "Time [min]", y = "Intensity [counts]")
ggplot(data = long_hplc, aes(x = Time, ymax = value)) + geom_ribbon(ymin = 0, fill = "paleturquoise3") + scale_x_continuous(breaks = round(seq(min(long_hplc$Time), max(long_hplc$Time), 0.5), 1)) + theme_bw() + facet_grid(rows = vars(long_hplc$group)) + labs(x = "Time [min]", y = "Intensity [counts]")
ggplot(data = long_hplc, aes(x = Time, ymax = value)) + geom_ribbon(ymin = 0, fill = "paleturquoise3", alpha = 0.5) + scale_x_continuous(breaks = round(seq(min(long_hplc$Time), max(long_hplc$Time), 0.5), 1)) + theme_bw() + facet_grid(rows = vars(long_hplc$group)) + labs(x = "Time [min]", y = "Intensity [counts]")
ggplot(data = long_hplc, aes(x = Time, ymax = value)) + geom_ribbon(ymin = 0, fill = "paleturquoise3", alpha = 0.5) + scale_x_continuous(breaks = round(seq(min(long_hplc$Time), max(long_hplc$Time), 0.5), 1)) + theme_bw() + facet_grid(rows = vars(long_hplc$group)) + labs(x = "Time [min]", y = "Intensity [counts]") + expand_limits(x = 0, y = 0)
ggplot(data = long_hplc, aes(x = Time, ymax = value)) + geom_ribbon(ymin = 0, fill = "paleturquoise3", alpha = 0.5) + scale_x_continuous(breaks = round(seq(min(long_hplc$Time), max(long_hplc$Time), 0.5), 1)) + theme_bw() + facet_grid(rows = vars(long_hplc$group)) + labs(x = "Time [min]", y = "Intensity [counts]")+ scale_y_continuous(expand = c(0, 0))
getwd()
save_plot("Desktop/Guaiacyl_degradation/growth_expt_hplc.pdf", p, base_height = 6, base_aspect_ratio = 1)
p <- ggplot(data = long_hplc, aes(x = Time, ymax = value)) + geom_ribbon(ymin = 0, fill = "paleturquoise3", alpha = 0.5) + scale_x_continuous(breaks = round(seq(min(long_hplc$Time), max(long_hplc$Time), 0.5), 1)) + theme_bw() + facet_grid(rows = vars(long_hplc$group)) + labs(x = "Time [min]", y = "Intensity [counts]")+ scale_y_continuous(expand = c(0, 0))
save_plot("Desktop/Guaiacyl_degradation/growth_expt_hplc.pdf", p, base_height = 6, base_aspect_ratio = 1)
library(tidyverse)
library(cowplot)
library(reshape2)
RPKM <- readRDS("RPKM_normalized_read_counts.rds")
diff_ex <- readRDS("Differential_expression_testing_results.rds")
gene_info <- readRDS("Gene_information_Apr2019.rds")
gene_names <- read_csv("gene_names.csv")
growth_data <- read_csv("ligLNDO-deletion_growth_curves2.csv")
growth_control <- read_csv("ligLNDO-deletion_growth_curves.csv")
enzyme_data <- read_csv("ligLND_enzymes_2020-07-09.csv")
GDK_tests <- read_csv("Diketone_degradation_HPLC_2020-07-01.csv")
fix_locus_tags <- readRDS("gene_names2locus_tags.rds")
gene_namse
gene_names
gene_info[which(gene_info$locus_tag == "SARO_RS14270")]
gene_info[which(gene_info$locus_tag == "SARO_RS14270"), ]
gene_info$CDS[which(gene_info$locus_tag == "SARO_RS14270")]
gene_info$CDS[which(gene_info$locus_tag == "SARO_RS14285")]
mm <- data.frame(S = c(0.5, 0.1, 0.75, 0.025), Vo = c(0.0005, 0.0004, 0.0008, 0.0001))
model.nls <- nls(Vo ~ Vm * S/(K+S), data = mm,start = list(K = max(mm$Vo)/2, Vm = max(mm$Vo)), trace = TRUE)
summary(model.nls)
library(tidyverse)
library(cowplot)
library(reshape2)
RPKM <- readRDS("RPKM_normalized_read_counts.rds")
diff_ex <- readRDS("Differential_expression_testing_results.rds")
gene_info <- readRDS("Gene_information_Apr2019.rds")
gene_names <- read_csv("gene_names.csv")
growth_data <- read_csv("ligLNDO-deletion_growth_curves2.csv")
growth_control <- read_csv("ligLNDO-deletion_growth_curves.csv")
enzyme_data <- read_csv("ligLND_enzymes_2020-07-09.csv")
GDK_tests <- read_csv("Diketone_degradation_HPLC_2020-07-01.csv")
fix_locus_tags <- readRDS("gene_names2locus_tags.rds")
head(diff_ex)
search <- c("Saro_0519", "Saro_0681", "Saro_1211", "Saro_1693", "Saro_3598", "Saro_3767")
gene_info[which(gene_info$old_locus_tag %in% search), ]
find <- gene_info$locus_tag[which(gene_info$old_locus_tag %in% search)]
find
diff_ex[which(diff_ex$Gene %in% find), ]
diff_ex[which(diff_ex$Gene %in% find & diff_ex$Comparison == "VAvsCtrl"), ]
quantile(diff_ex$logCPM)
quantile(diff_ex$logCPM[which(diff_ex$Comparison == "VAvsCtrl")])
diff_ex[which(diff_ex$Gene %in% find & diff_ex$FDR < 0.05), ]
search <- c("Saro_0519", "Saro_0681", "Saro_1211", "Saro_1693", "Saro_3598", "Saro_3767")
gene_info[which(gene_info$old_locus_tag %in% search), 1:2]
# Load packages and data
library(tidyverse)
gene_info <- readRDS("Gene_information_Apr2019.rds")
gene_info[which(gene_info$old_locus_tag %in% search), 1:2]
# Load packages and data
library(tidyverse)
library(cowplot)
library(reshape2)
growth_data <- read_csv("ligLNDO-deletion_growth_curves.csv")
growth_data
# Growth and enzyme data on ligN with the diketone
long_data <- melt(growth_data[, 4:dim(growth_data)[2]])
long_data
long_data$variable <- as.POSIXct(long_data$variable, format = c("%m/%d/%y %H:%M"))
long_data$Hours <- (long_data$variable - as.POSIXct("2019-10-07 15:25:00"))/(60*60)
head(long_data)
tail(long_datta)
tail(long_data)
growth_data
# Growth and enzyme data on ligN with the diketone
long_data <- melt(growth_data[, c(1, 3:dim(growth_data)[2])])
head(long_data)
# Growth and enzyme data on ligN with the diketone
long_data <- melt(growth_data[, c(1, 5:dim(growth_data)[2])])
head(long_data)
growth_data[, c(1, 5:dim(growth_data)[2])]
c(1, 5:dim(growth_data)[2])
# Growth and enzyme data on ligN with the diketone
growth_data$`Culture number` <- as.character(growth_data$`Culture number`)
long_data <- melt(growth_data[, c(1, 5:dim(growth_data)[2])])
long_data
long_data$variable <- as.POSIXct(long_data$variable, format = c("%m/%d/%y %H:%M"))
long_data$Hours <- (long_data$variable - as.POSIXct("2019-10-07 15:25:00"))/(60*60)
long_data$Strain <- growth_data$Strain[match(long_data$`Culture number`, growth_data$`Culture number`)]
long_data
long_data$Substrate <- growth_data$Carbon[match(long_data$`Culture number`, growth_data$`Culture number`)]
long_data
averaged_data <- aggregate(value ~ Strain + Hours + Substrate,  data = long_data, mean)
averaged_data
sd_data <- aggregate(value ~ Strain + Hours + Substrate,  data = long_data, sd)
averaged_data$error <- sd_data$value
averaged_data
growth_curve <- ggplot(averaged_data[which(averaged_data$Substrate == "G-diketone + glucose"), ], aes(x = Hours, y = value, color = Strain)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + theme_bw() + labs(x = "Hours", y = "Klett units") + scale_color_brewer(palette = "Paired") + labs(title = "1 mmol/L G-diketone + 1mmol/L glucose") + geom_line(aes(linetype = Strain))
growth_curve
growth_curve2 <- ggplot(averaged_data[which(averaged_data$Substrate == "Glucose"), ], aes(x = Hours, y = value, color = Strain)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + theme_bw() + labs(x = "Hours", y = "Klett units") + scale_color_brewer(palette = "Paired") + labs(title = "2 mmol/L glucose") + theme(legend.position = "none")  + geom_line(aes(linetype = Strain))
growth_curve2
growth_curve
growth_data <- read_csv("ligLNDO-deletion_growth_curves_cleaned.csv")
growth_data <- read_csv("ligLNDO-deletion_growth_curves_cleaned.csv")
growth_data <- read_csv("ligLNDO-deletion_growth_curves_cleaned.csv")
growth_data$`Culture number` <- as.character(growth_data$`Culture number`)
long_data <- melt(growth_data[, c(1, 5:dim(growth_data)[2])])
long_data$variable <- as.POSIXct(long_data$variable, format = c("%m/%d/%y %H:%M"))
long_data$Hours <- (long_data$variable - as.POSIXct("2019-10-07 15:25:00"))/(60*60)
long_data$Strain <- growth_data$Strain[match(long_data$`Culture number`, growth_data$`Culture number`)]
long_data$Substrate <- growth_data$Carbon[match(long_data$`Culture number`, growth_data$`Culture number`)]
averaged_data <- aggregate(value ~ Strain + Hours + Substrate,  data = long_data, mean)
sd_data <- aggregate(value ~ Strain + Hours + Substrate,  data = long_data, sd)
averaged_data$error <- sd_data$value
# Diketone data
growth_curve <- ggplot(averaged_data[which(averaged_data$Substrate == "G-diketone + glucose"), ], aes(x = Hours, y = value, color = Strain)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + theme_bw() + labs(x = "Hours", y = "Klett units") + scale_color_brewer(palette = "Paired") + labs(title = "1 mmol/L G-diketone + 1mmol/L glucose") + geom_line(aes(linetype = Strain))
# Glucose data
growth_curve2 <- ggplot(averaged_data[which(averaged_data$Substrate == "Glucose"), ], aes(x = Hours, y = value, color = Strain)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + theme_bw() + labs(x = "Hours", y = "Klett units") + scale_color_brewer(palette = "Paired") + labs(title = "2 mmol/L glucose") + theme(legend.position = "none")  + geom_line(aes(linetype = Strain))
combined_growth_curve <- plot_grid(growth_curve2, growth_curve, nrow = 1, labels = c("A.", "B."), rel_widths = c(1, 1.2))
combined_growth_curve
save_plot("growth_curve_2020-11-18.png", combined_growth_curve, base_height = 3, base_aspect_ratio = 3)
save_plot("growth_curve_2020-11-18.pdf", combined_growth_curve, base_height = 3, base_aspect_ratio = 3)
library(tidyverse)
library(cowplot)
library(reshape2)
enzyme_data <- read_csv("ligLND_enzymes_2020-07-09.csv")
averaged_data2 <- aggregate(Diketone ~ Sample + Time,  data = enzyme_data, mean)
sd_data2 <- aggregate(Diketone ~ Sample + Time,  data = enzyme_data, sd)
averaged_data2$error <- sd_data2$Diketone
enzyme_key <- c()
enzyme_key[which(enzyme_data$Sample == "Control+NADH" | enzyme_data$Sample == "Control-NADH")] <- "No enzyme"
enzyme_key[which(enzyme_data$Sample == "ligD-NADH" | enzyme_data$Sample == "ligD+NADH")] <- "ligD"
enzyme_key[which(enzyme_data$Sample == "ligN-NADH" | enzyme_data$Sample == "ligN+NADH")] <- "ligN"
enzyme_key[which(enzyme_data$Sample == "ligL-NADH" | enzyme_data$Sample == "ligL+NADH")] <- "ligL"
enzyme_data$Enzyme <- enzyme_key
enzyme_key <- c()
enzyme_key[which(averaged_data2$Sample == "Control+NADH" | averaged_data2$Sample == "Control-NADH")] <- "No enzyme"
enzyme_key[which(averaged_data2$Sample == "ligD-NADH" | averaged_data2$Sample == "ligD+NADH")] <- "ligD"
enzyme_key[which(averaged_data2$Sample == "ligN-NADH" | averaged_data2$Sample == "ligN+NADH")] <- "ligN"
enzyme_key[which(averaged_data2$Sample == "ligL-NADH" | averaged_data2$Sample == "ligL+NADH")] <- "ligL"
averaged_data2$Enzyme <- enzyme_key
NADH_key <- c()
NADH_key[which(averaged_data2$Sample == "Control+NADH" | averaged_data2$Sample == "ligD-NADH" | averaged_data2$Sample == "ligN-NADH" | averaged_data2$Sample == "ligL-NADH")] <- "-"
NADH_key[which(averaged_data2$Sample == "Control-NADH" | averaged_data2$Sample == "ligD+NADH" | averaged_data2$Sample == "ligN+NADH" | averaged_data2$Sample == "ligL+NADH")] <- "+"
averaged_data2$NADH <- NADH_key
enzyme_curve <- ggplot(averaged_data2[which(averaged_data2$Enzyme != "No enzyme"), ], aes(x = Time, y = Diketone, color = Enzyme, shape = NADH)) + geom_pointrange(aes(ymin = Diketone - error, ymax = Diketone + error), size = 0.5, alpha = 0.5) + theme_bw() + labs(title = "", x = "Hours", y = "mmol/L diketone") + scale_color_manual(labels=c("LigD", "LigN", "LigL"), name = "Enzyme", values = c("dodgerblue", "orange", "darkgrey"))  + geom_line()
enzyme_curve
save_plot("enzyme_curve.pdf", enzyme_curve, base_height = 3, base_aspect_ratio = 1.5)
library(vegan)
abundance = read.csv("/Users/Alex/Downloads/abs_genera.csv")
head(abundance)
str(abundance)
head(rownames(abundance))
abundance1 <- as.matrix.data.frame(abundance)
env = read.csv("/Users/Alex/Downloads/DMB5_group_metadata.csv")
head(evn)
head(env)
env1 <- as.data.frame(env)
rda <- rda(abundance1~Carbohydrate.utilization+OMCFA+SCFA,data=env1)
rda <- rda(t(abundance1)~Carbohydrate.utilization+OMCFA+SCFA,data=env1)
abundance[1:3, 1:3]
rda <- rda(abundance~Carbohydrate.utilization+OMCFA+SCFA,data=env)
rda <- rda(abundance~Carbohydrate.utilization+OMCFA+SCFA,data=env1)
rda <- rda(abundance~Carbohydrate.utilization,data=env1)
rda <- cca(abundance~Carbohydrate.utilization,data=env1)
rowSums(abundance)
abundance[3,]
as.numeric(abundance[3,])
sum(as.numeric(abundance[3,]))
rowSums(abundance)
sum(as.numeric(abundance[4,]))
as.numeric(abundance[4,])
abundance[4, 13] <- 0
rowSums(abundanc3)
rowSums(abundance)
rda <- rda(abundance~Carbohydrate.utilization,data=env1)
rda <- cca(abundance~Carbohydrate.utilization,data=env1)
summary(rda)
abundance = read.csv("/Users/Alex/Downloads/abs_genera.csv")
abundane[4,13] <- 0
abundance1 <- as.matrix.data.frame(abundance)
env = read.csv("/Users/Alex/Downloads/DMB5_group_metadata.csv")
env1 <- as.data.frame(env)
rda <- rda(abundance~Carbohydrate.utilization,data=env1)
abundance = read.csv("/Users/Alex/Downloads/abs_genera.csv")
abundance[4,13] <- 0
abundance1 <- as.matrix.data.frame(abundance)
env = read.csv("/Users/Alex/Downloads/DMB5_group_metadata.csv")
env1 <- as.data.frame(env)
rda <- rda(abundance~Carbohydrate.utilization,data=env1)
#rda <- cca(abundance~Carbohydrate.utilization,data=env1)
# Giketone paper figures list
# Load packages and data
library(tidyverse)
library(cowplot)
library(reshape2)
RPKM <- readRDS("RPKM_normalized_read_counts.rds")
diff_ex <- readRDS("Differential_expression_testing_results.rds")
gene_info <- readRDS("Gene_information_Apr2019.rds")
gene_names <- read_csv("gene_names.csv")
growth_data <- read_csv("ligLNDO-deletion_growth_curves_cleaned.csv")
enzyme_data <- read_csv("ligLND_enzymes_2020-07-09.csv")
GDK_tests <- read_csv("Diketone_degradation_HPLC_2020-07-01.csv")
fix_locus_tags <- readRDS("gene_names2locus_tags.rds")
fix_locus_tags$to_change <- as.character(fix_locus_tags$to_change)
fix_locus_tags$to_replace <- as.character(fix_locus_tags$to_replace)
for(i in 1:dim(fix_locus_tags)[1]){
z <- which(RPKM$Gene == fix_locus_tags$to_change[i])
RPKM$Gene[z] <- fix_locus_tags$to_replace[i]
y <- which(diff_ex$Gene == fix_locus_tags$to_change[i])
diff_ex$Gene[y] <- fix_locus_tags$to_replace[i]
}
diff_ex_control <- diff_ex[grep("Ctrl", diff_ex$Comparison), ]
substrate <- c()
substrate[which(diff_ex_control$Comparison == "PCAvsCtrl")] <- "PCA"
substrate[which(diff_ex_control$Comparison == "VAvsCtrl")] <- "vanillic acid"
substrate[which(diff_ex_control$Comparison == "VvsCtrl")] <- "vanillin"
substrate[which(diff_ex_control$Comparison == "FAvsCtrl")] <- "ferulic acid"
substrate[which(diff_ex_control$Comparison == "UNvsCtrl")] <- "GDK intermediate"
substrate[which(diff_ex_control$Comparison == "GDKvsCtrl")] <- "G-diketone"
diff_ex_control$Substrate <- substrate
condition <- c()
condition[grep("Glu_", RPKM$Sample)] <- "glucose"
condition[grep("PCA_", RPKM$Sample)] <- "PCA"
condition[grep("VA_", RPKM$Sample)] <- "vanillic acid"
condition[grep("V_", RPKM$Sample)] <- "vanillin"
condition[grep("FA_", RPKM$Sample)] <- "ferulic acid"
condition[grep("UN_", RPKM$Sample)] <- "GDK intermediate"
condition[grep("GDK_", RPKM$Sample)] <- "G-diketone"
RPKM$Condition <- condition
RPKM$Condition <- factor(RPKM$Condition, levels = c("glucose", "PCA", "vanillic acid", "vanillin", "ferulic acid", "GDK intermediate", "G-diketone"))
#WT on diketone only
GDK_tests <- GDK_tests[which(GDK_tests$culture == "sacB-G-diketone"), ]
long_GDK <- melt(GDK_tests)
head(GDK_tests)
long_GDK$timepoint <- as.POSIXct(long_GDK$timepoint, format = c("%m/%d/%y %H:%M"))
long_GDK$Hours <- (long_GDK$timepoint - as.POSIXct("2020-06-12 10:30:00"))/(60*60)
averaged_GDK <- aggregate(value ~ culture + Hours + variable,  data = long_GDK, mean)
sd_GDK <- aggregate(value ~ culture + Hours + variable,  data = long_GDK, sd)
averaged_GDK$error <- sd_GDK$value
density <- ggplot(averaged_GDK[which(averaged_GDK$variable == "klett"), ], aes(x = Hours, y = value)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + theme_bw() + labs(x = "Hours", y = "Klett units") + scale_color_brewer(palette = "Paired") + labs(title = "Growth on 1mmol/L G-diketone + 1mmol/L Glucose") + theme(legend.position = "none")  + geom_line()
va_detection <- ggplot(data = averaged_GDK[which(averaged_GDK$variable == "Vanillic acid" | averaged_GDK$variable == "Vanillin"), ], aes(x = Hours, y = value, color = group)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + geom_line() + theme_bw() + labs(x = "Hours", y = "mmol/L") + labs(title = "Known Intermediates")
va_detection
va_detection <- ggplot(data = averaged_GDK[which(averaged_GDK$variable == "Vanillic acid" | averaged_GDK$variable == "Vanillin"), ], aes(x = Hours, y = value, color = variable)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + geom_line() + theme_bw() + labs(x = "Hours", y = "mmol/L") + labs(title = "Known Intermediates")
va_detection
va_detection <- ggplot(data = averaged_GDK[which(averaged_GDK$variable == "Vanillic acid" | averaged_GDK$variable == "Vanillin"), ], aes(x = Hours, y = value, color = variable)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + geom_line() + theme_bw() + labs(x = "Hours", y = "mmol/L") + labs(title = "Known intermediates", legend.title = NA)
va_detection
va_detection <- ggplot(data = averaged_GDK[which(averaged_GDK$variable == "Vanillic acid" | averaged_GDK$variable == "Vanillin"), ], aes(x = Hours, y = value, color = variable)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + geom_line() + theme_bw() + labs(x = "Hours", y = "mmol/L") + labs(title = "Known intermediates") + theme(legend. title = element_blank())
va_detection <- ggplot(data = averaged_GDK[which(averaged_GDK$variable == "Vanillic acid" | averaged_GDK$variable == "Vanillin"), ], aes(x = Hours, y = value, color = variable)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + geom_line() + theme_bw() + labs(x = "Hours", y = "mmol/L") + labs(title = "Known intermediates") + theme(legend.title = element_blank())
va_detection
GDK_plots <- plot_grid(density, concentrations, va_detection, intermediates, nrow = 4, labels = c("A.", "B.", "C.", "D."))
density <- ggplot(averaged_GDK[which(averaged_GDK$variable == "klett"), ], aes(x = Hours, y = value)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + theme_bw() + labs(x = "Hours", y = "Klett units") + scale_color_brewer(palette = "Paired") + labs(title = "Growth on 2mmol/L G-diketone + 1mmol/L Glucose") + theme(legend.position = "none")  + geom_line()
concentrations <- ggplot(data = averaged_GDK[which(averaged_GDK$variable == "G-diketone-norm"), ], aes(x = Hours, y = value)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + geom_line() + theme_bw() + labs(x = "Hours", y = "mmol/L diketone") + labs(title = "Diketone concentration")
va_detection <- ggplot(data = averaged_GDK[which(averaged_GDK$variable == "Vanillic acid" | averaged_GDK$variable == "Vanillin"), ], aes(x = Hours, y = value, color = variable)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + geom_line() + theme_bw() + labs(x = "Hours", y = "mmol/L") + labs(title = "Known intermediates") + theme(legend.title = element_blank())
intermediates <- ggplot(data = averaged_GDK[which(averaged_GDK$variable == "Intermediate"), ], aes(x = Hours, y = value)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + geom_line() + theme_bw() + labs(x = "Hours", y = "relative peak area") + labs(title = "Unknown intermediates relative detection")
GDK_plots <- plot_grid(density, concentrations, va_detection, intermediates, nrow = 4, labels = c("A.", "B.", "C.", "D."))
GDK_plots
concentrations
averaged_GDK[which(averaged_GDK$variable == "G-diketone-norm"), ]
va_detection <- ggplot(data = averaged_GDK[which(averaged_GDK$variable == "Vanillic acid" | averaged_GDK$variable == "Vanillin"), ], aes(x = Hours, y = value, color = variable)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + geom_line() + theme_bw() + labs(x = "Hours", y = "mmol/L") + labs(title = "Known intermediates") + theme(legend.title = element_blank(), legend.position = "topright")
va_detection
va_detection <- ggplot(data = averaged_GDK[which(averaged_GDK$variable == "Vanillic acid" | averaged_GDK$variable == "Vanillin"), ], aes(x = Hours, y = value, color = variable)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + geom_line() + theme_bw() + labs(x = "Hours", y = "mmol/L") + labs(title = "Known intermediates") + theme(legend.title = element_blank(), legend.position = "top right")
va_detection
va_detection <- ggplot(data = averaged_GDK[which(averaged_GDK$variable == "Vanillic acid" | averaged_GDK$variable == "Vanillin"), ], aes(x = Hours, y = value, color = variable)) + geom_pointrange(aes(ymin = value - error, ymax = value + error), size = 0.5, alpha = 0.5) + geom_line() + theme_bw() + labs(x = "Hours", y = "mmol/L") + labs(title = "Known intermediates") + theme(legend.title = element_blank(), legend.position = c(90, 0.3))
va_detection
library(tidyverse)
library(cowplot)
library(reshape2)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
library(tidyverse)
library(cowplot)
library(reshape2)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
print(1000 * (0.000003 * (dFBA$Biomass[length(dFBA$Biomass)] - dFBA$Biomass[1]) - 0.00005))
print(1000 * (0.000003 * (dFBA$Biomass[length(dFBA$Biomass)] - dFBA$Biomass[1]) - 0.00005) * -1000)
tail(dFBA$Biomass)
0.1529/0.002
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
150/1
150/2
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
tail(dFBA$Biomass)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
tail(dFBA$Biomass)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
tail(dFBA$Biomass)
tail(dFBA)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
plot[dFBA[,1]]
plot(dFBA[,1])
plot(dFBA[,2])
head(dFBA[,1])
head(dFBA)
plot(dFBA[,3])
plot(dFBA[,1], dFBA[,3])
plot(as.numeric(dFBA[,4]), as.numeric(dFBA[,3]))
as.numeric(dFBA[,4])
dFBA[,4]
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
colnames(dFBA)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
dFBA$C00011
plot(dFBA$C00011)
colnames(dFBA)
plot(dFBA$C00010)
plot(dFBA$exC00009)
plot(dFBA$exC141818)
plot(dFBA$exC14818)
plot(dFBA$exC00282)
plot(dFBA$C00282)
colnames(dFBA)
plot(dFBA$C04425)
plot(dFBA$exC00014)
plot(dFBA$exC00153)
plot(dFBA$C00153)
plot(dFBA$C00001)
plot(dFBA$exC00001)
colnames(dFBA)
plot(dFBA$exC00007)
plot(dFBA$PDC)
plot(dFBA$C00054)
plot(dFBA$C05198)
plot(dFBA$C000266)
plot(dFBA$C00266)
plot(dFBA$exC00059)
colnames(dFBA)
plot(dFBA$C00132)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
gene_info <- readRDS("RNA-Seq/Data/Gene_information_Apr2019.rds")
gene_names <- read_csv("RNA-Seq/Data/gene_names.csv")
# Set path to AromaticDiketones folder here
setwd("/Users/Alex/Desktop/AromaticDiketones/")
# Load packages and data
library(tidyverse)
library(cowplot)
library(reshape2)
gene_info <- readRDS("RNA-Seq/Data/Gene_information_Apr2019.rds")
gene_names <- read_csv("RNA-Seq/Data/gene_names.csv")
gene_info[which(gene_info$locus_tag == "SARO_RS14285"),]
gene_info$CDS[which(gene_info$locus_tag == "SARO_RS14285")]
gene_info$CDS[which(gene_info$locus_tag == "SARO_RS03660")]
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Novosphingobium_modeling/dFBA_batch_plotting.R', echo=TRUE)
source('~/Desktop/Guaiacyl_degradation/operon_expression.R', echo=TRUE)
getwd()
setwd("RNA-Seq/Data")
RPKM <- readRDS("RPKM_normalized_read_counts.rds")
diff_ex <- readRDS("Differential_expression_testing_results.rds")
gene_info <- readRDS("Gene_information_Apr2019.rds")
gene_names <- read_csv("gene_names.csv")
source('~/Desktop/Guaiacyl_degradation/operon_expression.R', echo=TRUE)
str(diff_ex_control)
source('~/Desktop/Guaiacyl_degradation/operon_expression.R', echo=TRUE)
plot_operon(2812:2816, "Saro_2812-Saro_2816")
source('~/Desktop/Guaiacyl_degradation/operon_expression.R', echo=TRUE)
plot_operon(2812:2816, "Saro_2812-Saro_2816")
source('~/Desktop/Guaiacyl_degradation/operon_expression.R', echo=TRUE)
plot_operon(2812:2816, "Saro_2812-Saro_2816")
plot_operon(c(2812, 2814, 2816), "Saro_2812-Saro_2816")
source('~/Desktop/Guaiacyl_degradation/operon_expression.R', echo=TRUE)
plot_operon(c(2812, 2814, 2816), "An example of non-consecutive genes")
source('~/Desktop/Guaiacyl_degradation/operon_expression.R', echo=TRUE)
plot_operon(c(2812, 2814, 2816), "An example of non-consecutive genes")
plot_operon(2812:2816, "Saro_2812-Saro_2816")
